import functools

from .futures import *

CO_GENERATOR = 0x20
def _gen():
    yield 10
_GEN_TYPE = type(_gen())

def isgenerator_function(object):
    return bool(hasattr(object,'__code__') and  (object.__code__.co_flags & CO_GENERATOR))

def iscoroutinefunction(func):
    """Return True if func is a decorated coroutine function."""
    return getattr(func, '_is_coroutine', False)

def isgenerator(object):
    return isinstance(object, _GEN_TYPE)

def iscoroutine(obj):
    """Return True if obj is a coroutine object."""
    return isgenerator(obj) or iscoroutinefunction(obj)

def coroutine(func):
    """Decorator to mark coroutines."""

    if isgenerator_function(func):
        coro = func
    else:
        @functools.wraps(func)
        def coro(*args, **kw):
            res = func(*args, **kw)
            if isinstance(res, futures.Future) or isgenerator(res):
                res = yield from res
            res.gi_frame = None
            return res

    coro.gi_frame = None
    coro._is_coroutine = True  # For iscoroutinefunction().
    return coro



def _format_coroutine(coro):
    try:
        assert iscoroutine(coro)
        coro_name = getattr(coro, '__qualname__', coro.__name__)

        filename = coro.__code__.co_filename
        if coro.gi_frame is not None:
            lineno = coro.gi_frame.f_lineno
            coro_repr = ('%s() running at %s:%s'
                        % (coro_name, filename, lineno))
        else:
            lineno = coro.__code__.co_firstlineno
            coro_repr = ('%s() done, defined at %s:%s'
                        % (coro_name, filename, lineno))
    except:
        coro_repr = "Coroutine: %s" % coro_name
    return coro_repr
