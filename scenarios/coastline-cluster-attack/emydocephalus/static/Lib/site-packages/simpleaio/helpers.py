"""Logging configuration."""

import functools

logger = None
def error(*args, **kwargs):
    if logger is None:
        import logging
        logger = logging.get_logger(__package__)
    logger.error(*args, **kwargs)

def _get_function_source(func):
    if hasattr(func, '__wrapped__'):
        func = func.__wrapped__
    if isinstance(func, functools.partial):
        return _get_function_source(func.func)
    if hasattr(func, '__code__'):
        code = func.__code__
        return (code.co_filename, code.co_firstlineno)
    return None


def _format_args(args):
    """Format function arguments.

    Special case for a single parameter: ('hello',) is formatted as ('hello').
    """
    # use reprlib to limit the length of the output
    args_repr = repr(args)
    if len(args) == 1 and args_repr.endswith(',)'):
        args_repr = args_repr[:-2] + ')'
    return args_repr


def format_callback(func, args, suffix=''):
    if isinstance(func, functools.partial):
        if args is not None:
            suffix = _format_args(args) + suffix
        return format_callback(func.func, func.args, suffix)

    func_repr = getattr(func, '__qualname__', None)
    if not func_repr:
        func_repr = repr(func)

    if args is not None:
        func_repr += _format_args(args)
    if suffix:
        func_repr += suffix

    source = _get_function_source(func)
    if source:
        func_repr += ' at %s:%s' % source
    return func_repr

