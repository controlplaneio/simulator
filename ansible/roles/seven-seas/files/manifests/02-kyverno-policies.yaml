apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: disallow-privileged-containers
  annotations:
    policies.kyverno.io/title: Disallow Privileged Containers
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    kyverno.io/kyverno-version: 1.6.0
    kyverno.io/kubernetes-version: "1.22-1.23"
    policies.kyverno.io/description: >-
      Privileged mode disables most security mechanisms and must not be allowed. This policy
      ensures Pods do not call for privileged mode.
spec:
  validationFailureAction: enforce
  background: true
  rules:
    - name: privileged-containers
      match:
        any:
          - resources:
              kinds:
                - Pod
              namespaces:
                - south-atlantic
      validate:
        message: >-
          Nice try! Privileged mode is disallowed.
        pattern:
          spec:
            =(ephemeralContainers):
              - =(securityContext):
                  =(privileged): "false"
            =(initContainers):
              - =(securityContext):
                  =(privileged): "false"
            containers:
              - =(securityContext):
                  =(privileged): "false"
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: disallow-privilege-escalation
  annotations:
    policies.kyverno.io/title: Disallow Privilege Escalation
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    kyverno.io/kyverno-version: 1.6.0
    kyverno.io/kubernetes-version: "1.22-1.23"
    policies.kyverno.io/description: >-
      Privilege escalation, such as via set-user-ID or set-group-ID file mode, should not be allowed.
      This policy ensures the `allowPrivilegeEscalation` field is set to `false`.
spec:
  validationFailureAction: enforce
  background: true
  rules:
    - name: privilege-escalation
      match:
        any:
          - resources:
              kinds:
                - Pod
              namespaces:
                - south-atlantic
      validate:
        message: >-
          Nice try! Privilege escalation is disallowed.
        pattern:
          spec:
            =(ephemeralContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
            =(initContainers):
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
            containers:
              - =(securityContext):
                  =(allowPrivilegeEscalation): "false"
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: disallow-host-path
  annotations:
    policies.kyverno.io/title: Disallow hostPath
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod,Volume
    kyverno.io/kyverno-version: 1.6.0
    kyverno.io/kubernetes-version: "1.22-1.23"
    policies.kyverno.io/description: >-
      HostPath volumes let Pods use host directories and volumes in containers.
      Using host resources can be used to access shared data or escalate privileges
      and should not be allowed. This policy ensures no hostPath volumes are in use.
spec:
  validationFailureAction: enforce
  background: true
  rules:
    - name: host-path
      match:
        any:
          - resources:
              kinds:
                - Pod
              namespaces:
                - south-atlantic
      validate:
        message: >-
          Nice try! HostPath volumes are forbidden.
        pattern:
          spec:
            =(volumes):
              - X(hostPath): "null"
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: psp-restrict-adding-capabilities
  annotations:
    policies.kyverno.io/title: Restrict Adding Capabilities
    policies.kyverno.io/category: PSP Migration
    policies.kyverno.io/severity: medium
    kyverno.io/kyverno-version: 1.6.0
    policies.kyverno.io/minversion: 1.6.0
    kyverno.io/kubernetes-version: "1.23"
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/description: >-
      Adding capabilities is a way for containers in a Pod to request higher levels
      of ability than those with which they may be provisioned. Many capabilities
      allow system-level control and should be prevented. Pod Security Policies (PSP)
      allowed a list of "good" capabilities to be added. This policy checks
      ephemeralContainers, initContainers, and containers to ensure the only
      capabilities that can be added are either NET_BIND_SERVICE or CAP_CHOWN.
spec:
  validationFailureAction: enforce
  background: true
  rules:
    - name: allowed-capabilities
      match:
        any:
          - resources:
              kinds:
                - Pod
              namespaces:
                - south-atlantic
      preconditions:
        all:
          - key: "{{ request.operation || 'BACKGROUND' }}"
            operator: NotEquals
            value: DELETE
      validate:
        message: >-
          Nice try! Any capabilities added other than NET_BIND_SERVICE or CAP_CHOWN are disallowed.
        foreach:
          - list: request.object.spec.[ephemeralContainers, initContainers, containers][]
            deny:
              conditions:
                all:
                  - key: "{{ element.securityContext.capabilities.add[] || '' }}"
                    operator: AnyNotIn
                    value:
                      - NET_BIND_SERVICE
                      - CAP_CHOWN
                      - ''
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: add-sidecar
  annotations:
    policies.kyverno.io/title: Add Sidecar
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/subject: Pod
spec:
  rules:
    - name: add-sidecar
      match:
        any:
          - resources:
              kinds:
                - Pod
              namespaces:
                - south-atlantic
      mutate:
        patchStrategicMerge:
          spec:
            containers:
              - image: docker.io/controlplaneoffsec/seven-seas:blockade-ship
                command: [ "sleep", "2d" ]
                name: blockade-ship
                securityContext:
                  allowPrivilegeEscalation: false
            restartPolicy: Always
